version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: transcript_db
    environment:
      POSTGRES_DB: transcript_db
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d transcript_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: transcript_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: transcript_backend
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://dev:dev@postgres:5432/transcript_db
      REDIS_URL: redis://redis:6379
      API_NINJAS_KEY: ${API_NINJAS_KEY}
      NODE_ENV: development
      PORT: 3001
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: transcript_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:3001
      VITE_WS_URL: ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: transcript_network 